#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// https://zmk.dev/docs/keymaps/input-processors
#include <input/processors.dtsi>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;

    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&mkp_input_listener {
    // マウスキークリック時にAMLを5秒延長
    input-processors = <&zip_temp_layer 4 5000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        Esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        // AMLを解除する
        exit_AML: exit_AML {
            compatible = "zmk,behavior-macro";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings = <&tog_off 4>;
            label = "exit_AML";
        };

        // キー押下後にAMLを解除する
        kp_exit_AML: kp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &exit_AML>;
            label = "KP_exit_AML";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // レイヤを無効化する
        tog_off: toggle_layer_off {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };

        // ホールド時はkp、タップ時はkp_exit_AMLを使う
        // このbehaviorをmtの代わりに使用し、設定したキーをexcluded-positionsに入れる
        mt_exit_AML_on_tap: mt_exit_AML_on_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_exit_AML_ON_TAP";
            bindings = <&kp>, <&kp_exit_AML>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q      &kp W         &kp E             &kp R  &kp T                                                          &kp Y                    &kp U  &kp I        &kp O    &kp P
&kp A      &kp S         &mt LEFT_SHIFT D  &kp F  &kp G        &trans                &tog 3                      &kp H                    &kp J  &kp K        &kp L    &kp MINUS
&kp Z      &kp X         &kp C             &kp V  &kp B        &kp LEFT_CONTROL      &kp RIGHT_GUI               &kp N                    &kp M  &lt 5 COMMA  &kp DOT  &kp BACKSPACE
&kp LSHFT  &kp LEFT_WIN  &kp LEFT_ALT      &mo 1  &lt 5 SPACE  &lt 2 LANGUAGE_2      &mt RIGHT_SHIFT LANGUAGE_1  &mt RIGHT_CONTROL ENTER                               &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp LS(TAB) TAB>;
        };

        symbol_arrow {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RCTRL                                  &kp TILDE      &kp QUESTION  &kp COLON     &kp SEMI   &kp PLUS
&kp LEFT_BRACE   &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DOLLAR   &trans              &kp HOME  &kp AMPERSAND  &kp EQUAL     &kp UP_ARROW  &kp SQT    &kp DOUBLE_QUOTES
&kp PIPE         &kp ASTERISK     &kp HASH              &kp GRAVE              &kp PERCENT  &kp UNDERSCORE      &kp END   &kp BSLH       &kp LEFT      &kp DOWN      &kp RIGHT  &kp FSLH
&trans           &trans           &trans                &trans                 &trans       &trans              &trans    &trans                                                &trans
            >;
        };

        number_symbol {
            bindings = <
&kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp MINUS                                &kp F10  &kp F7  &kp F8  &kp F9  &kp LC(LS(K))
&kp N0        &kp N4  &kp N5  &kp N6  &kp PLUS   &trans      &trans            &kp F11  &kp F4  &kp F5  &kp F6  &trans
&kp SLASH     &kp N1  &kp N2  &kp N3  &kp DOT    &trans      &kp LA(LS(DOWN))  &kp F12  &kp F1  &kp F2  &kp F3  &kp LC(SLASH)
&trans        &trans  &trans  &trans  &trans     &trans      &trans            &trans                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        gaming {
            bindings = <
&kp Q      &kp W         &kp E         &kp R           &kp T                                         &kp Y      &kp U     &kp I      &kp O       &kp P
&kp A      &kp S         &kp D         &kp F           &kp G      &trans          &tog 3             &kp H      &mkp MB1  &mkp MB3   &mkp MB2    &kp MINUS
&kp Z      &kp X         &kp C         &kp V           &kp B      &mo 5           &kp F3             &kp N      &kp M     &kp COMMA  &kp PERIOD  &kp BACKSPACE
&kp LSHFT  &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp SPACE  &kp ESCAPE      &kp RIGHT_CONTROL  &kp ENTER                                   &kp F5
            >;

            sensor-bindings = <&inc_dec_kp LS(TAB) TAB>;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans             &trans             &trans             &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &mkp_exit_AML MB4  &mkp_exit_AML MB1  &mkp_exit_AML MB3  &mkp_exit_AML MB2  &mkp_exit_AML MB5
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans             &trans             &trans             &trans             &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                      &trans
            >;
        };

        scroll_fn_bluetooth {
            bindings = <
&kp LC(LA(DELETE))  &trans          &kp LG(LS(UP_ARROW))  &trans             &trans                                &bt BT_SEL 2  &kp LG(LS(N8))        &kp LG(LS(N9))      &kp LG(LS(N0))  &bt BT_SEL 4
&kp LEFT_CONTROL    &kp LG(LS(S))   &kp LC(PAGE_UP)       &kp LC(PAGE_DOWN)  &trans  &trans      &trans            &bt BT_SEL 1  &kp LG(LEFT_ARROW)    &kp LG(UP_ARROW)    &kp LG(RIGHT)   &bt BT_SEL 3
&kp LEFT_SHIFT      &kp K_MUTE      &kp C_VOLUME_DOWN     &kp C_VOLUME_UP    &trans  &trans      &kp LG(LS(LEFT))  &bt BT_SEL 0  &kp LG(LS(NUMBER_6))  &kp LC(DOWN_ARROW)  &kp LG(LS(N7))  &trans
&trans              &bt BT_CLR_ALL  &bt BT_CLR            &trans             &trans  &trans      &trans            &trans                                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(MINUS) LC(SEMI)>;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
